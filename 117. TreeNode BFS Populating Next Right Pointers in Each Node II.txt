/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null) return root;
        Node cur = root;
        while(cur!=null){
            Node dummy = new Node(-1);
            Node t = dummy;
            for(Node p=cur;p!=null;p=p.next){
                if(p.left!=null) t=t.next=p.left;
                if(p.right!=null) t=t.next=p.right;
            }
            cur=dummy.next;
        }
        return root;
    }
}


/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null) return null;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int n = q.size();
            for(int i=0;i<n-1;i++){
                Node t = q.poll();
                t.next=q.peek();
                if(t.left!=null) q.add(t.left);
                if(t.right!=null) q.add(t.right);
            }
            Node t= q.poll();
            t.next=null;
            if(t.left!=null) q.add(t.left);
            if(t.right!=null) q.add(t.right);
        }
        return root;
    }
}