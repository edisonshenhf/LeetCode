class WordDictionary {
    TrieNode root;
    public WordDictionary() {
        root= new TrieNode();
    }
    
    public void addWord(String word) {
        TrieNode cur = root;
        for(int i=0;i<word.length();i++){
            if(cur.children[word.charAt(i)-'a']==null) cur.children[word.charAt(i)-'a']=new TrieNode();
            cur=cur.children[word.charAt(i)-'a'];
        }
        cur.isWord=true;
    }
    
    public boolean search(String word) {
        return dfs(word,0,root);
    }

    public boolean dfs(String word,int idx, TrieNode cur){
        if(idx==word.length()) return cur.isWord;
        char chr = word.charAt(idx);
        if(chr!='.'){
            if(cur.children[chr-'a']!=null){
                return dfs(word,idx+1,cur.children[chr-'a']);
            }
        }else{
            for(int i=0;i<26;i++){
                if(cur.children[i]!=null){
                    if(dfs(word,idx+1,cur.children[i])) return true;
                }
            }
        }
        return false;
    }
}

class TrieNode{
    boolean isWord;
    TrieNode[] children;
    public TrieNode(){
        isWord=false;
        children=new TrieNode[26];
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */