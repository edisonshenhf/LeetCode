class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length <= 0 || matrix[0].length < 0) return 0;
        int n = matrix.length;
        int m = matrix[0].length;
        int[][] f = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]=='1'){
                    if(i == 0) f[i][j] = 1;
                    else f[i][j] = 1 + f[i - 1][j];
                }
            }
        }
        int res = 0;
        for(int i=0;i<n;i++) res=Math.max(res,largestRectangleArea(f[i]));
        return res;
    }

    int largestRectangleArea(int[] heights){
        int n = heights.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack<>();
        for(int i=0;i<n;i++){
            while(!stack.isEmpty()&&heights[stack.peek()]>=heights[i]) stack.pop();
            if(stack.isEmpty()) left[i]=-1;
            else left[i]=stack.peek();
            stack.push(i);
        }
        stack.clear();
        for(int i=n-1;i>=0;i--){
            while(!stack.isEmpty()&&heights[stack.peek()]>=heights[i]) stack.pop();
            if(stack.isEmpty()) right[i]=n;
            else right[i]=stack.peek();
            stack.push(i);
        }
        int res= 0;
        for(int i = 0;i<n;i++){
            res=Math.max(res,(right[i]-left[i]-1)*heights[i]);
        }
        return res;
    }
}