class Solution {
    public boolean validTree(int n, int[][] edges) {
        List<List<Integer>> list = new ArrayList<>();
        for(int i=0;i<n;i++) list.add(new ArrayList<>());
        for(int[] edge:edges){
            list.get(edge[0]).add(edge[1]);
            list.get(edge[1]).add(edge[0]);
        }
        HashMap<Integer,Integer> map = new HashMap<>();
        Queue<Integer> q = new LinkedList<>();
        map.put(0,-1);
        q.add(0);
        while(!q.isEmpty()){
            int root = q.poll();
            for(int next:list.get(root)){
                if(map.get(root)==next) continue;
                if(map.containsKey(next)) return false;
                q.add(next);
                map.put(next,root);
            }
        }
        return map.size()==n;
    }
}