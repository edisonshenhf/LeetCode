
//朴素算法
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int i=0;int j=m-1;
        while(i<n&&j>=0){
            if(matrix[i][j]>target) j--;
            else if(matrix[i][j]<target) i++;
            else break;
        }
        if(i>=n||j<0) return false;
        return matrix[i][j]==target;
    }
}

//二分+坐标变化

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0||matrix[0].length==0) return false;
        int n = matrix.length; int m = matrix[0].length;
        int l = 0; int r = n*m-1;
        while(l<r){
            int mid =l+r>>1;
            if(matrix[mid/m][mid%m]>=target) r=mid;
            else l=mid+1;
        }
        return matrix[r/m][r%m]==target;
    }
}