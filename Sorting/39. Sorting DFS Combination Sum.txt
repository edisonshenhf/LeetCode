class Solution {
    List<List<Integer>> res = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    int[] candidates;
    int n;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        this.candidates=candidates;
        n=candidates.length;
        dfs(0,target);
        return res;
    }

    void dfs(int u,int target){
        if(target==0){
            res.add(new ArrayList<>(path));
            return;
        }
        if(u==n) return;

        for(int i =u;i<n;i++){
            if(target-candidates[i]>=0){
                path.add(candidates[i]);
                dfs(i,target-candidates[i]);
                path.remove(path.size()-1);
            }
        }
    }
}