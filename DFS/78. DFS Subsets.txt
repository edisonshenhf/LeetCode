class Solution {
    List<List<Integer>> res;
    public List<List<Integer>> subsets(int[] nums) {
        res=new ArrayList<>();
        for(int i =0;i<nums.length;i++){
            dfs(i,nums,new ArrayList<>());
        }
        res.add(new ArrayList<>());
        return res;
    }

    void dfs(int u,int[] nums,List<Integer> list){
        list.add(nums[u]);
        res.add(new ArrayList<>(list));
        for(int i=u+1;i<nums.length;i++){
            dfs(i,nums,list);
        }
        list.remove(list.size()-1);
    }
}


class Solution {
    List<List<Integer>> res = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
        dfs(0,nums);
        return res;
    }

    void dfs(int u,int[] nums){
        if(u==nums.length){
            res.add(new ArrayList<>(path));
            return;
        }
        //add nums[u]
        path.add(nums[u]);
        dfs(u+1,nums);
        path.remove(path.size()-1);

        //skip nums[u];
        dfs(u+1,nums);
    }
}
