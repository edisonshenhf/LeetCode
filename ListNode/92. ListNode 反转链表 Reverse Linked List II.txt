/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(head==null||head.next==null||left==right) return head;
        ListNode dummy = new ListNode(-1);
        dummy.next=head;
        ListNode p = dummy;
        for(int i=0;i<left-1;i++){
            p=p.next;
        }
        ListNode l = p.next;
        ListNode r = dummy;
        for(int i=0;i<right;i++){
            r=r.next;
        }
        ListNode q = r.next;
        p.next=null;
        r.next=null;
        ListNode temp=reverse(l);
        p.next= temp;
        while(temp.next!=null) temp=temp.next;
        temp.next=q;
        return dummy.next;
    }

    ListNode reverse(ListNode head){
        ListNode cur = head;
        ListNode pre = null;
        while(cur!=null){
            ListNode temp = cur.next;
            cur.next=pre;
            pre=cur;
            cur=temp;
        }
        return pre;
    }
}