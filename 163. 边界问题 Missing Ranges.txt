class Solution {
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> res= new ArrayList<>();
        if(nums.length<1){
            if(lower==upper) res.add(""+lower);
            else{
                StringBuilder sb= new StringBuilder();
                sb.append(lower);
                sb.append("->");
                sb.append(upper);
                res.add(sb.toString());
            }
            return res;
        }
        if(nums[0]-lower>=1){
            int l = lower;
            int r = nums[0];
            if(r-l==1) res.add(""+l);
            else{
                StringBuilder sb = new StringBuilder();
                sb.append(l);
                sb.append("->");
                sb.append(r-1);
                res.add(sb.toString());
            }
        }
        for(int i=0;i<nums.length-1;i++){
            if(nums[i+1]-nums[i]>1)res.add(helperIn(nums[i],nums[i+1]));
        }
        if(upper-nums[nums.length-1]>=1){
            int l = nums[nums.length-1];
            int r = upper;
            if(r-l==1) res.add(""+r);
            else{
                StringBuilder sb = new StringBuilder();
                sb.append(l+1);
                sb.append("->");
                sb.append(r);
                res.add(sb.toString());
            }
        }
        return res;
    }

    String helperIn(int l,int r){
        if(r-l==2) return ""+(l+1);
        else{
            StringBuilder sb = new StringBuilder();
            sb.append(l+1);
            sb.append("->");
            sb.append(r-1);
            return sb.toString();
        }
    }
        String helperOut(int l,int r){
        if(r-l==2) return ""+(l+1);
        else{
            StringBuilder sb = new StringBuilder();
            sb.append(l);
            sb.append("->");
            sb.append(r);
            return sb.toString();
        }
    }
}