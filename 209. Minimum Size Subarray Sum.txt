//经典双指针算法 考虑单调性
//朴素双指针 o(n)时间
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int res = Integer.MAX_VALUE;
        int sum =0;
        for(int i=0,j=0;i<nums.length;i++){
            sum+=nums[i];
            while(sum-nums[j]>=target){
                sum-=nums[j++];
            }
            if(sum>=target) res=Math.min(res,i-j+1);
        }
        if(res==Integer.MAX_VALUE) return 0;
        return res;
    }
}

//maybe nlogn算法?

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        TreeMap<Integer,Integer> map = new TreeMap<>();
        map.put(0,-1);
        int res = 0, max = 0x3f3f3f3f;
        for(int i=0;i<nums.length;i++){
            res+=nums[i];
            Integer k = map.floorKey(res-target);
            if(k!=null){
                int j = map.get(k);
                max=Math.min(max,i-j);
            }
            map.put(res,i);
        }
        return max==0x3f3f3f3f?0:max;
    }
}
