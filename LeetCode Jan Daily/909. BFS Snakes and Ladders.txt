class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        HashMap<Integer,int[]> map = new HashMap<>();
        for(int i=n-1,k=1,s=0;i>=0;i--,s++){
            if(s%2==0){
                for(int j=0;j<n;j++,k++){
                    map.put(k,new int[]{i,j});
                }
            }else{
                for(int j=n-1;j>=0;j--,k++){
                    map.put(k,new int[]{i,j});
                }
            }
        }
        int[] dist = new int[n*n+1];
        Arrays.fill(dist,(int)1e9);
        dist[1]=0;
        Queue<Integer> q = new LinkedList<>();
        q.add(1);
        while(!q.isEmpty()){
            int t = q.poll();
            if(t==n*n) return dist[t];
            for(int i=t+1;i<=n*n&&i<=t+6;i++){
                int x = map.get(i)[0];
                int y = map.get(i)[1];
                if(board[x][y]==-1){
                   if(dist[i]>dist[t]+1){
                       dist[i]=dist[t]+1;
                       q.add(i);
                   }
                }else{
                    int next = board[x][y];
                    if(dist[next]>dist[t]+1){
                        dist[next]=dist[t]+1;
                        q.add(next);
                    } 
                }
            }
        }
        return -1;
    }
}