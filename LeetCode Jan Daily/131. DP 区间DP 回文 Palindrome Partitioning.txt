class Solution {
    List<List<String>> res = new ArrayList<>();
    List<String> path = new ArrayList<>();
    boolean[][] g;
    public List<List<String>> partition(String s) {
        int n = s.length();
        g= new boolean[n][n];
        init(s);
        dfs(0,s);
        return res;
    }

    void init(String s){
        int n = s.length();
        for(int i=0;i<n;i++){
            for(int j=0;j<=i;j++){
                if(i==j) g[j][i]=true;
                else if(s.charAt(i)==s.charAt(j)&&(j+1>i-1||g[j+1][i-1])) g[j][i]=true;
            }
        }
    }

    void dfs(int u,String s){
        if(u==s.length()){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=u;i<s.length();i++){
            if(g[u][i]){
                path.add(s.substring(u,i+1));
                dfs(i+1,s);
                path.remove(path.size()-1);
            }
        }
    }
}