class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length+nums2.length;
        if(n%2==0){
            int left = find(nums1,0,nums2,0,n/2);
            int right = find(nums1,0,nums2,0,n/2+1);
            return (left+right)/2.0;
        }else return find(nums1,0,nums2,0,n/2+1);
    }

    int find(int[] nums1,int i,int[] nums2,int j,int k){
        if(nums1.length-i>nums2.length-j) return find(nums2,j,nums1,i,k);
        if(nums1.length==i) return nums2[j+k-1];
        if(k==1) return Math.min(nums1[i],nums2[j]);
        int si = Math.min(i+k/2,nums1.length) , sj =j+k/2;
        if(nums1[si-1]>nums2[sj-1]){
            return find(nums1,i,nums2,j+k/2,k-k/2);
        }else{
            return find(nums1,si,nums2,j,k-(si-i));
        }
    }
}