/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int n = preorder.length;
        for(int i=0;i<n;i++){
            map.put(inorder[i],i);
        }
        return dfs(preorder,inorder,0,n-1,0,n-1);
    }

    TreeNode dfs(int[] preorder,int[] inorder,int pl,int pr,int il,int ir){
        if(pl>pr) return null;
        int t = preorder[pl];
        TreeNode root = new TreeNode(t);
        int k = map.get(t);
        root.left=dfs(preorder,inorder,pl+1,pl+1+k-1-il,il,k-1);
        root.right=dfs(preorder,inorder,pl+1+k-1-il+1,pr,k+1,ir);
        return root;
    }
}