/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    HashMap<Node,Node> map = new HashMap<>();
    public Node cloneGraph(Node node) {
        if(node==null) return null;
        dfs(node);
        for(var set:map.entrySet()){
            Node a= set.getKey();
            Node b = set.getValue();
            List<Node> res= new ArrayList<>();
            for(int i=0;i<a.neighbors.size();i++){
                res.add(map.get(a.neighbors.get(i)));
            }
            b.neighbors=res;
        }
        return map.get(node);
    }

    void dfs(Node node){
        map.put(node,new Node(node.val));
        for(Node c:node.neighbors){
            if(!map.containsKey(c)) dfs(c);
        }
    }
}