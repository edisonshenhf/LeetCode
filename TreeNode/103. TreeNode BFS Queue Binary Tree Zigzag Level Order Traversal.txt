/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null) return res;
        q.add(root);
        dfs(q,0);
        return res;
    }

    void dfs(Queue<TreeNode> q,int depth){
        if(q.isEmpty()) return;
        int n = q.size();
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<n;i++){
            TreeNode t = q.poll();
            list.add(t.val);
            if(t.left!=null) q.add(t.left);
            if(t.right!=null) q.add(t.right);
        }
        if(depth%2==0) res.add(new ArrayList<>(list));
        else{
            Collections.reverse(list);
            res.add(new ArrayList<>(list));
        }
        dfs(q,depth+1);
    }
}