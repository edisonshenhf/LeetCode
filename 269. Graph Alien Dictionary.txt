class Solution {
    public String alienOrder(String[] words) {
        HashMap<Character,List<Character>> map = new HashMap<>();
        HashMap<Character,Integer> cnt = new HashMap<>();
        for(String word:words){
            for(char c:word.toCharArray()){
                map.put(c,new ArrayList<>());
                cnt.put(c,0);
            }
        }
        for(int i=0;i<words.length-1;i++){
            if(words[i].length()>words[i+1].length()&&words[i].startsWith(words[i+1])) return "";
            int len = Math.min(words[i].length(),words[i+1].length());
            for(int j=0;j<len;j++){
                if(words[i].charAt(j)!=words[i+1].charAt(j)){
                    List<Character> temp = map.get(words[i].charAt(j));
                    temp.add(words[i+1].charAt(j));
                    map.put(words[i].charAt(j),temp);
                    cnt.put(words[i+1].charAt(j),cnt.get(words[i+1].charAt(j))+1);
                    break;
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        Queue<Character> q = new LinkedList<>();
        for(char c:cnt.keySet()){
            if(cnt.get(c)==0){
                q.add(c);
            }
        }
        while(!q.isEmpty()){
            char c= q.poll();
            sb.append(c);
            List<Character> temp = map.get(c);
            for(char next:temp){
                cnt.put(next,cnt.get(next)-1);
                if(cnt.get(next)==0){
                    q.add(next);
                }
            }
        }
        if(sb.length()<cnt.size()) return "";
        return sb.toString();
    }
}