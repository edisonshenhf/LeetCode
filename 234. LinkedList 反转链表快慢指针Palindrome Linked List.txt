//反转链表+快慢指针

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null||head.next==null) return true;
        ListNode fast = head;
        ListNode slow = head;
        ListNode mid = head;
        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            mid=slow;
            slow=slow.next;
        }
        ListNode h1=head;
        ListNode h2=mid.next;
        mid.next=null;
        h2=reverse(h2);
        while(h1!=null&&h2!=null){
            if(h1.val!=h2.val) return false;
            h1=h1.next;
            h2=h2.next;
        }
        return true;
    }

    ListNode reverse(ListNode head){
        ListNode pre = null;
        ListNode cur = head;
        while(cur!=null){
            ListNode temp = cur.next;
            cur.next=pre;
            pre=cur;
            cur=temp;
        }
        return pre;
    }
}