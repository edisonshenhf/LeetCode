class Solution {
    List<List<Integer>> res = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    boolean[] st;
    int[] nums;
    int n;
    public List<List<Integer>> permuteUnique(int[] nums) {
        this.nums=nums;
        n=nums.length;
        st=new boolean[n];
        Arrays.sort(nums);
        dfs(0);
        return res;
    }

    void dfs(int u){
        if(u==n){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=0;i<n;i++){
            if(!st[i]){
                if(i>0&&nums[i-1]==nums[i]&&st[i-1]) continue;
                path.add(nums[i]);
                st[i]=true;
                dfs(u+1);
                st[i]=false;
                path.remove(path.size()-1);
            }
        }
    }
}